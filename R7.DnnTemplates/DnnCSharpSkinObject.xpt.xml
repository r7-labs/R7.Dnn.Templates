<?xml version="1.0"?>
<Template originator="Roman M. Yagodin" created="2014/05/15" lastModified="2014/10/16">
	<!-- Template Header -->
	<TemplateConfiguration>
		<_Name>C# compiled skin object</_Name>
		<_Category>C#/DNN Platform</_Category>
		<Icon>md-project-web</Icon>
		<LanguageName>C#</LanguageName>
        <ProjectType>AspNetApp</ProjectType>
		<_Description>Creates a new DNN Platform C# compiled skin object project.

NOTE: By default, choose DNN 'DesktopModules' folder for project location and ensure that 'Create directory for solution' flag is checked.</_Description>
	</TemplateConfiguration>
	<!-- Actions -->
	<Actions>
		<Open filename="SETUP.md" />
	</Actions>
	<!-- Template Content -->
	<Combine name="${ProjectName}" directory=".">
		<Options>
			<StartupProject>"${ProjectName}</StartupProject>
		</Options>
		<Project name="${ProjectName}" directory="." type="AspNetApp">
			<!-- Causes errors in ASP.NET code completition! 
				<Options Target="Library" TargetFrameworkVersion="4.0" /> 
			-->
			<References>
				<Reference type="Package" refto="System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
				<Reference type="Package" refto="System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
				<Reference type="Package" refto="System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
				<Reference type="Package" refto="System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
				<Reference type="Package" refto="System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
				<Reference type="Package" refto="System.Web.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
				<Reference type="Package" refto="System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" />
				<Reference type="Package" refto="System.Xml.Linq, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
				<Reference type="Assembly" refto="..\..\..\bin\DotNetNuke.dll" />
				<Reference type="Assembly" refto="..\..\..\bin\DotNetNuke.Web.dll" />
				<Reference type="Assembly" refto="..\..\..\bin\Telerik.Web.UI.dll" />
			</References>
			<!-- Other refrences (for future use):
	<Reference type="Package" refto="System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
	<Reference type="Package" refto="System.Web.Routing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" SpecificVersion="false" />
	<Reference type="Package" refto="System.Web.Abstractions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" SpecificVersion="false" />
	<Reference type="Package" refto="System.Web.Mvc, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" SpecificVersion="false" />
	<Reference type="Package" refto="System.Web.WebPages, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" />
	<Reference type="Package" refto="System.Web.Helpers, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" />
	<Reference type="Package" refto="System.Web.DynamicData, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" />
	<Reference type="Package" refto="System.ComponentModel.DataAnnotations, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" SpecificVersion="false" />
	<Reference type="Package" refto="Microsoft.CSharp, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
	-->
			<Files>
                <Directory name="SqlDataProvider">
				<File name="01.00.00.SqlDataProvider"><![CDATA[-- NOTE: To manually execute this script you must 
-- replace {databaseOwner} and {objectQualifier} with real values. 
-- Defaults is "dbo." for database owner and "" for object qualifier 

-- Create tables

IF NOT EXISTS (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}${ProjectName}_${ProjectName}s]') and OBJECTPROPERTY(id, N'IsTable') = 1)
	BEGIN
		CREATE TABLE {databaseOwner}[{objectQualifier}${ProjectName}_${ProjectName}s]
		(
			[${ProjectName}ID] int NOT NULL IDENTITY(1, 1),
			[TabID] int NOT NULL,
			[Content] nvarchar(max) NOT NULL,
			[CreatedByUser] int NOT NULL,
			[CreatedOnDate] datetime NOT NULL
		)

		ALTER TABLE {databaseOwner}[{objectQualifier}${ProjectName}_${ProjectName}s] 
			ADD CONSTRAINT [PK_{objectQualifier}${ProjectName}_${ProjectName}s] PRIMARY KEY CLUSTERED  ([${ProjectName}ID])
			
		CREATE NONCLUSTERED INDEX [IX_{objectQualifier}${ProjectName}_${ProjectName}s_TabID] 
			ON {databaseOwner}[{objectQualifier}${ProjectName}_${ProjectName}s] ([TabID])

		ALTER TABLE {databaseOwner}[{objectQualifier}${ProjectName}_${ProjectName}s] WITH NOCHECK 
			ADD CONSTRAINT [FK_{objectQualifier}${ProjectName}_${ProjectName}s_{objectQualifier}Tabs] FOREIGN KEY ([ModuleID]) REFERENCES {databaseOwner}[{objectQualifier}Tabs] ([TabID]) ON DELETE CASCADE NOT FOR REPLICATION
			
		ALTER TABLE {databaseOwner}[{objectQualifier}${ProjectName}_${ProjectName}s] 
			ADD CONSTRAINT [DF_{objectQualifier}${ProjectName}_${ProjectName}s_CreatedOnDate] DEFAULT (getdate()) FOR [CreatedOnDate]
	END
GO
]]></File>
				<File name="Uninstall.SqlDataProvider"><![CDATA[-- NOTE: To manually execute this script you must 
-- replace {databaseOwner} and {objectQualifier} with real values. 
-- Defaults is "dbo." for database owner and "" for object qualifier 

-- Drop tables

ALTER TABLE {databaseOwner}[{objectQualifier}${ProjectName}_${ProjectName}s] 
	DROP CONSTRAINT [FK_{objectQualifier}${ProjectName}_${ProjectName}s_{objectQualifier}Tabs]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}${ProjectName}_${ProjectName}s] 
	DROP CONSTRAINT [PK_{objectQualifier}${ProjectName}_${ProjectName}s]
GO

DROP INDEX {databaseOwner}[{objectQualifier}${ProjectName}_${ProjectName}s].[IX_{objectQualifier}${ProjectName}_${ProjectName}s_TabID]
GO

DROP TABLE {databaseOwner}[{objectQualifier}${ProjectName}_${ProjectName}s]
GO
]]></File>
    </Directory>
				<Directory name="App_LocalResources">
					<File name="${ProjectName}.ascx.resx"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <data xml:space="preserve" name="Template.Text">
    <value>&lt;div class="[CSSCLASS]"&gt;&lt;h3&gt;[CREATEDBYUSER]: [CREATEDONDATE]&lt;/h3&gt;&lt;p&gt;[CONTENT]&lt;/p&gt;&lt;/div&gt;</value>
  </data>
  <data xml:space="preserve" name="SystemUser.Text">
    <value>System</value>
  </data>
</root>]]></File>
  <File name="${ProjectName}.ascx.ru-RU.resx"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <data xml:space="preserve" name="Template.Text">
    <value>&lt;div class="[CSSCLASS]"&gt;&lt;h3&gt;[CREATEDBYUSER]: [CREATEDONDATE]&lt;/h3&gt;&lt;p&gt;[CONTENT]&lt;/p&gt;&lt;/div&gt;</value>
  </data>
  <data xml:space="preserve" name="SystemUser.Text">
    <value>Система</value>
  </data>
</root>]]></File>
				</Directory>
				<Directory name="lib">
				    <File name="ControllerBase.cs" AddStandardHeader="True"><![CDATA[using System;
using System.Data;
using System.Collections.Generic;
using System.Text;
using System.Xml;
using System.Linq;
using DotNetNuke.Collections;
using DotNetNuke.Data;
using DotNetNuke.Common.Utilities;
using DotNetNuke.Entities.Modules;
using DotNetNuke.Services.Search;

namespace ${ProjectName}
{
	public abstract class ControllerBase
	{
		#region Common methods

		/// <summary>
		/// Initializes a new instance of the <see cref="${ProjectName}.ControllerBase"/> class.
		/// </summary>
		protected ControllerBase ()
		{ 

		}

		/// <summary>
		/// Adds a new T object into the database
		/// </summary>
		/// <param name='info'></param>
		public void Add<T> (T info) where T: class
		{
			using (var ctx = DataContext.Instance ()) {
				var repo = ctx.GetRepository<T> ();
				repo.Insert (info);
			}
		}

		/// <summary>
		/// Get single object from the database
		/// </summary>
		/// <returns>
		/// The object
		/// </returns>
		/// <param name='itemId'>
		/// Item identifier.
		/// </param>
		public T Get<T> (int itemId) where T: class
		{
			T info;

			using (var ctx = DataContext.Instance ()) {
				var repo = ctx.GetRepository<T> ();
				info = repo.GetById (itemId);
			}

			return info;
		}

		/// <summary>
		/// Get single object from the database
		/// </summary>
		/// <returns>
		/// The object
		/// </returns>
		/// <param name='itemId'>
		/// Item identifier.
		/// </param>
		/// <param name='scopeId'>
		/// Scope identifier (like moduleId)
		/// </param>
		public T Get<T> (int itemId, int scopeId) where T: class
		{
			T info;

			using (var ctx = DataContext.Instance ()) {
				var repo = ctx.GetRepository<T> ();
				info = repo.GetById (itemId, scopeId);
			}

			return info;
		}

		/// <summary>
		/// Updates an object already stored in the database
		/// </summary>
		/// <param name='info'>
		/// Info.
		/// </param>
		public void Update<T> (T info) where T: class
		{
			using (var ctx = DataContext.Instance ()) {
				var repo = ctx.GetRepository<T> ();
				repo.Update (info);
			}
		}

		/// <summary>
		/// Gets all objects for items matching scopeId
		/// </summary>
		/// <param name='scopeId'>
		/// Scope identifier (like moduleId)
		/// </param>
		/// <returns></returns>
		public IEnumerable<T> GetObjects<T> (int scopeId) where T: class
		{
			IEnumerable<T> infos = null;

			using (var ctx = DataContext.Instance ()) {
				var repo = ctx.GetRepository<T> ();
				infos = repo.Get (scopeId);

				// Without [Scope("ModuleID")] it should be like:
				// infos = repo.Find ("WHERE ModuleID = @0", moduleId);
			}

			return infos;
		}

		/// <summary>
		/// Gets all objects of type T from database
		/// </summary>
		/// <returns></returns>
		public IEnumerable<T> GetObjects<T> () where T: class
		{
			IEnumerable<T> infos = null;

			using (var ctx = DataContext.Instance ()) {
				var repo = ctx.GetRepository<T> ();
				infos = repo.Get ();
			}

			return infos;
		}

		/// <summary>
		/// Gets the all objects of type T from result of a dynamic sql query
		/// </summary>
		/// <returns>Enumerable with objects of type T</returns>
		/// <param name="sqlCondition">SQL command condition.</param>
		/// <param name="args">SQL command arguments.</param>
		/// <typeparam name="T">Type of objects.</typeparam>
		public IEnumerable<T> GetObjects<T> (string sqlConditon, params object[] args) where T: class
		{
			IEnumerable<T> infos = null;

			using (var ctx = DataContext.Instance ()) {
				var repo = ctx.GetRepository<T> ();
				infos = repo.Find (sqlConditon, args);
			}

			return infos;
		}

		/// <summary>
		/// Gets the all objects of type T from result of a dynamic sql query
		/// </summary>
		/// <returns>Enumerable with objects of type T</returns>
		/// <param name="cmdType">Type of an SQL command.</param>
		/// <param name="sql">SQL command.</param>
		/// <param name="args">SQL command arguments.</param>
		/// <typeparam name="T">Type of objects.</typeparam>
		public IEnumerable<T> GetObjects<T> (System.Data.CommandType cmdType, string sql, params object[] args) where T: class
		{
			IEnumerable<T> infos = null;

			using (var ctx = DataContext.Instance ()) {
				infos = ctx.ExecuteQuery<T>	(cmdType, sql, args);
			}

			return infos;
		}

		/// <summary>
		/// Gets one page of objects of type T
		/// </summary>
		/// <param name="scopeId">Scope identifier (like moduleId)</param>
		/// <param name="index">a page index</param>
		/// <param name="size">a page size</param>
		/// <returns>A paged list of T objects</returns>
		public IPagedList<T> GetPage<T> (int scopeId, int index, int size) where T: class
		{
			IPagedList<T> infos;

			using (var ctx = DataContext.Instance ()) {
				var repo = ctx.GetRepository<T> ();
				infos = repo.GetPage (scopeId, index, size);
			}

			return infos;
		}

		/// <summary>
		/// Gets one page of objects of type T
		/// </summary>
		/// <param name="index">a page index</param>
		/// <param name="size">a page size</param>
		/// <returns>A paged list of T objects</returns>
		public IPagedList<T> GetPage<T> (int index, int size) where T: class
		{
			IPagedList<T> infos;

			using (var ctx = DataContext.Instance ()) {
				var repo = ctx.GetRepository<T> ();
				infos = repo.GetPage (index, size);
			}

			return infos;
		}

		/// <summary>
		/// Delete a given item from the database by instance
		/// </summary>
		/// <param name='info'></param>
		public void Delete<T> (T info) where T: class
		{
			using (var ctx = DataContext.Instance ()) {
				var repo = ctx.GetRepository<T> ();
				repo.Delete (info);

			}
		}

		/// <summary>
		/// Delete a given item from the database by ID
		/// </summary>
		/// <param name='itemId'></param>
		public void Delete<T> (int itemId) where T: class
		{
			using (var ctx = DataContext.Instance ()) {
				var repo = ctx.GetRepository<T> ();
				repo.Delete (repo.GetById (itemId));
			}
		}

		/// <summary>
		/// Delete some item from the database using SQL condition
		/// </summary>
		/// <param name='sqlConditon'>SQL condition</param>
		/// <param name='args'>Optional arguments</param>
		public void Delete<T> (string sqlConditon, params object[] args) where T: class
		{
			using (var ctx = DataContext.Instance ()) {
				var repo = ctx.GetRepository<T> ();
				repo.Delete(sqlConditon, args);
			}
		}

		#endregion
	}
}
]]></File>
<File name="Utils.cs" AddStandardHeader="True"><![CDATA[using System;
using System.Web;
using System.IO;
using System.Text;
using System.Collections.Generic;
using System.Web.UI.WebControls;
using DotNetNuke.UI.Modules;
using DotNetNuke.Common;
using DotNetNuke.Common.Utilities;
using DotNetNuke.Entities.Portals;
using DotNetNuke.Entities.Modules;
using DotNetNuke.Entities.Users;
using DotNetNuke.Services.Localization;

namespace ${ProjectName}
{
	/// <summary>
	/// Message severities
	/// </summary>
	public enum MessageSeverity
	{
		Info,
		Warning,
		Error
	}

	public class Utils
	{
		public static string GetUserDisplayName (int userId)
		{
			var portalId = PortalController.GetCurrentPortalSettings ().PortalId;
			var user = UserController.GetUserById (portalId, userId);

			// TODO: "System" user name needs localization
			return (user != null) ? user.DisplayName : "System";
		}

		/// <summary>
		/// Determines if the specified file is an images.
		/// </summary>
		/// <returns></returns>
		/// <param name="fileName">File name.</param>
		public static bool IsImage (string fileName)
		{
			if (!string.IsNullOrWhiteSpace (fileName))
				return Globals.glbImageFileTypes.Contains (
					Path.GetExtension (fileName).Substring (1).ToLowerInvariant ());
			else
				return false;
		}

		/// <summary>
		/// Formats the URL by DNN rules.
		/// </summary>
		/// <returns>Formatted URL.</returns>
		/// <param name="module">A module reference.</param>
		/// <param name="link">A link value. May be TabID, FileID=something or in other valid forms.</param>
		/// <param name="trackClicks">If set to <c>true</c> then track clicks.</param>
		public static string FormatURL (IModuleControl module, string link, bool trackClicks)
		{
			return DotNetNuke.Common.Globals.LinkClick 
				(link, module.ModuleContext.TabId, module.ModuleContext.ModuleId, trackClicks);
		}

		/// <summary>
		/// Formats the Edit control URL by DNN rules (popups supported).
		/// </summary>
		/// <returns>Formatted Edit control URL.</returns>
		/// <param name="module">A module reference.</param>
		/// <param name="controlKey">Edit control key.</param>
		/// <param name="args">Additional parameters.</param>
		public static string EditUrl (IModuleControl module, string controlKey, params string[] args)
		{
			var argList = new List<string> (args); 
			argList.Add ("mid");
			argList.Add (module.ModuleContext.ModuleId.ToString ());

			return module.ModuleContext.NavigateUrl (module.ModuleContext.TabId, controlKey, false, argList.ToArray ());
		}

		/// <summary>
		/// Finds the item index by it's value in ListControl-type list.
		/// </summary>
		/// <returns>Item index.</returns>
		/// <param name="list">List control.</param>
		/// <param name="value">A value.</param>
		/// <param name="defaultIndex">Default index (in case item not found).</param>
		public static int FindIndexByValue (ListControl list, object value, int defaultIndex = 0)
		{ 
			if (value != null)
			{
				var index = 0;
				var strvalue = value.ToString ();
				foreach (ListItem item in list.Items) {
					if (item.Value == strvalue)
						return index;
					index++;
				}
			}

			return defaultIndex; 
		}

		/// <summary>
		/// Sets the selected index of ListControl-type list.
		/// </summary>
		/// <param name="list">List control.</param>
		/// <param name="value">A value.</param>
		/// <param name="defaultIndex">Default index (in case item not found).</param>
		public static void SelectByValue (ListControl list, object value, int defaultIndex = 0)
		{
			list.SelectedIndex = FindIndexByValue (list, value, defaultIndex);
		}

		/// <summary>
		/// Display a message at the top of the specified module.
		/// </summary>
		/// <param name="module">Module reference.</param>
		/// <param name="severity">Message severity level.</param>
		/// <param name="message">Message text.</param>
		public static void Message (IModuleControl module, MessageSeverity severity, string message, bool localize = false)
		{
			var label = new Label ();
			label.CssClass = "dnnFormMessage dnnForm" + severity;
			label.Text = localize? Localization.GetString(message, module.LocalResourceFile) : message;

			module.Control.Controls.AddAt (0, label);
		}


		public static bool IsNull<T> (Nullable<T> n) where T: struct
		{
			// NOTE: n.HasValue is equvalent to n != null
			if (n.HasValue && !Null.IsNull (n.Value)) 
				return false;

			return true;
		}

		public static Nullable<T> ToNullable<T>(T n) where T: struct
		{
			return Null.IsNull (n)? null : (Nullable<T>) n;
		}	

		/// <summary>
		/// Parses specified string value to a nullable int, 
		/// also with convertion of Null.NullInteger to null 
		/// </summary>
		/// <returns>The nullable int.</returns>
		/// <param name="value">String value to parse.</param>
		public static int? ParseToNullableInt(string value)
		{
			// TODO: Make another variant of ParseToNullableInt() without using DNN Null object

			int n;

			if (int.TryParse (value, out n))
				return Null.IsNull (n)? null : (int?) n;
			else
				return null;
		}	

		/*
		public static Nullable<T> ParseToNullable<T>(string value) where T: struct
		{
			T n;

			if (Convert.ChangeType(value, typeof(T))
				return Null.IsNull (n)? null : (Nullable<T>) n;
			else
				return null;
		}*/

		/// <summary>
		/// Formats the list of arguments, excluding empty
		/// </summary>
		/// <returns>Formatted list.</returns>
		/// <param name="separator">Separator.</param>
		/// <param name="args">Arguments.</param>
		public static string FormatList (string separator, params object [] args)
		{
			var sb = new StringBuilder (args.Length);

			var i = 0;
			foreach (var a in args)
			{
				if (!string.IsNullOrWhiteSpace (a.ToString()))
				{
					if (i++ > 0)
						sb.Append (separator);

					sb.Append (a);
				}
			}

			return sb.ToString ();
		}

		public static string FirstCharToUpper(string s)
		{
			if (!string.IsNullOrWhiteSpace (s))
			if (s.Length == 1)
				return s.ToUpper();
			else
				return s.ToUpper()[0].ToString () + s.Substring (1);
			else
				return s;
		}

		public static string FirstCharToUpperInvariant(string s)
		{
			if (!string.IsNullOrWhiteSpace (s))
			if (s.Length == 1)
				return s.ToUpperInvariant();
			else
				return s.ToUpperInvariant()[0].ToString () + s.Substring (1);
			else
				return s;
		}

		public static void SynchronizeModule(IModuleControl module)
		{
			ModuleController.SynchronizeModule(module.ModuleContext.ModuleId);

			// NOTE: update module cache (temporary fix before 7.2.0)?
			// more info: https://github.com/dnnsoftware/Dnn.Platform/pull/21
			var moduleController = new ModuleController();
			moduleController.ClearCache (module.ModuleContext.TabId);

		}
	} // class
} // namespace
]]></File>		
<FileTemplateReference TemplateID="CSharpAssemblyInfo" name="AssemblyInfo.cs" />
				</Directory>
				<Directory name="components">
					<File name="${ProjectName}Controller.cs" AddStandardHeader="True"><![CDATA[using System;
using System.Collections.Generic;
using System.Text;
using System.Xml;
using System.Linq;
using DotNetNuke.Collections;
using DotNetNuke.Data;
using DotNetNuke.Common.Utilities;
using DotNetNuke.Entities.Modules;
using DotNetNuke.Services.Search;
using DotNetNuke.Services.Search.Entities;

namespace ${ProjectName}
{
	public partial class ${ProjectName}Controller : ControllerBase
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="${ProjectName}.${ProjectName}Controller"/> class.
		/// </summary>
		public ${ProjectName}Controller () : base ()
		{ 

		}
	}
}
]]></File>
<!--<FileTemplateReference TemplateID="DotNetNuke PetaPOCO class" name="${ProjectName}Info.cs" />-->
<File name="${ProjectName}Info.cs" AddStandardHeader="True"><![CDATA[using System;
using System.Linq;

using DotNetNuke.Data;
using DotNetNuke.ComponentModel.DataAnnotations;
using DotNetNuke.Entities.Portals;
using DotNetNuke.Entities.Users;

namespace ${ProjectName}
{
	// More attributes for class:
	// Set caching for table: [Cacheable("${ProjectName}_${Name}s", CacheItemPriority.Default, 20)] 
	// Explicit mapping declaration: [DeclareColumns]
	
	// More attributes for class properties:
	// Custom column name: [ColumnName("${ProjectName}ID")]
	// Explicit include column: [IncludeColumn]
	// Note: DAL 2 has no AutoJoin analogs from PetaPOCO at this time
	
	[TableName("${ProjectName}_${ProjectName}s")]
	[PrimaryKey("${ProjectName}ID", AutoIncrement = true)]
	[Scope("TabID")]
	public class ${ProjectName}Info
	{
        #region Fields
        
		private string createdByUserName = null;

		#endregion
		
		/// <summary>
		/// Empty default cstor
		/// </summary>
		public ${ProjectName}Info ()
		{
		}

        #region Properties

		public int ${ProjectName}ID { get; set; }

		public int TabID { get; set; }

		public string Content { get; set; }

		public int CreatedByUser { get; set; }

		[ReadOnlyColumn]
		public DateTime CreatedOnDate { get; set; }
        
		[IgnoreColumn]
		public string CreatedByUserName
		{
			get
			{
				if (createdByUserName == null)
				{
					var portalId = PortalController.GetCurrentPortalSettings ().PortalId;
					var user = UserController.GetUserById (portalId, CreatedByUser);
					createdByUserName = user.DisplayName;
				}

				return createdByUserName; 
			}
		    set 
		    {
		    	createdByUserName = value;
		    }
		}

        #endregion
	}
}
]]></File>

				</Directory>
				<File name="${ProjectName}.ascx"><![CDATA[<%@ Control Language="C#" AutoEventWireup="true" CodeBehind="${ProjectName}.ascx.cs" Inherits="${ProjectName}.${ProjectName}" %>
<%@ OutputCache Duration="1200" VaryByParam="TabId" %>

<asp:Literal ID="litContent" runat="server"></asp:Literal>
]]></File>
				<File name="${ProjectName}.ascx.cs" DependsOn="${ProjectName}.ascx" AddStandardHeader="True"><![CDATA[// TODO: Convert to DAL2

using System;
using System.IO;
using System.Web;

using System.Web.UI;
using System.Web.UI.WebControls;
using DotNetNuke.UI.Skins;
using DotNetNuke.Services.Localization;

namespace ${ProjectName}
{
	public partial class ${ProjectName} : SkinObjectBase
	{
		private string localResourceFile = null;
		private string template = null;

		public string CssClass
		{
			get 
			{
				if (!string.IsNullOrEmpty(Attributes ["CssClass"]))
					return Attributes ["CssClass"];

				return string.Empty;		
			}
		}

		private string LocalResourceFile 
		{
			get 
			{ 
				if (localResourceFile == null)
					// NOTE: ASCX control name is needed!
					localResourceFile = Localization.GetResourceFile (this, "${ProjectName}.ascx");
				
				return localResourceFile; 
			}
		}
		
		private string Template 
		{
			get 
			{
				if (template == null) 
				{
					template = Localization.GetString ("Template.Text", LocalResourceFile);
					if (string.IsNullOrEmpty (template))
						template = "Error loading template from resource file!";
				}
				
				return this.template;
			}
		}			
				
		protected override void OnLoad (EventArgs e)
		{
			base.OnLoad(e);

			if (!IsPostBack)
			{
				var ctrl = new ${ProjectName}Controller ();
				var item = ctrl.Get<${ProjectName}Info>(PortalSettings.ActiveTab.TabID);

				if (item != null)
				{
					// stub for NULL values in usernames
					if (string.IsNullOrEmpty (item.CreatedByUserName))
						item .CreatedByUserName = Localization.GetString("SystemUser.Text", LocalResourceFile);
					
					// fill template
					var content = Template.Replace ("[CREATEDONDATE]", item.CreatedOnDate.ToShortDateString ());
					content = content.Replace ("[CREATEDBYUSER]", item.CreatedByUserName);
					content = content.Replace ("[CONTENT]", item.Content);
					content = content.Replace ("[CSSCLASS]", CssClass);

					litContent.Text = content;
				}
			}
		}
	}
}
]]></File>
				<File name="${ProjectName}.ascx.controls.cs" DependsOn="${ProjectName}.ascx" ShowAutogenerationNotice="False" AddStandardHeader="False" SuppressAutoOpen="True"><![CDATA[using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Linq;

using DotNetNuke.UI.UserControls;
using DotNetNuke.UI.WebControls;
using DotNetNuke.Web.UI.WebControls;

namespace ${ProjectName}
{
	public partial class ${ProjectName}
	{	
		protected Literal litContent;
	}
}]]></File>
  				<File name="${ProjectName}.dnn"><![CDATA[<dotnetnuke type="Package" version="5.0">
 <packages>
   <package name="${ProjectName}" type="SkinObject" version="01.00.00">
     <friendlyName>${ProjectName}</friendlyName>
     <description>This is a simple skin object to display a record from database table.</description>
     <owner>
       <name>${AuthorName}</name>
       <organization>${AuthorCompany}</organization>
       <url>http://www.${AuthorCompany}.com/${ProjectName}</url>
       <email>${AuthorEmail}</email>
     </owner>
	 <license src="License.txt" />
     <releaseNotes src="ReleaseNotes.txt" />
     <!-- <dependencies>
		<dependency type="CoreVersion">07.00.00</dependency>
	</dependencies> -->
     <components>
        <component type="SkinObject">
  			<moduleControl>
			    <controlKey>${ProjectName}</controlKey>
    			<controlSrc>/DesktopModules/${ProjectName}/${ProjectName}/${ProjectName}.ascx</controlSrc>
    			<supportsPartialRendering>false</supportsPartialRendering>
  			</moduleControl>
		</component>

       <component type="Script">
         <scripts>
           <basePath>DesktopModules\${ProjectName}\${ProjectName}</basePath>
           <script type="Install">
             <name>SqlDataProvider\01.00.00.SqlDataProvider</name>
             <version>01.00.00</version>
           </script>
           <script type="UnInstall">
             <name>SqlDataProvider\Uninstall.SqlDataProvider</name>
             <version>01.00.00</version>
           </script>
         </scripts>
       </component>

       <component type="ResourceFile">
         <resourceFiles>
           <basePath>DesktopModules\${ProjectName}\${ProjectName}</basePath>
           <resourceFile>
             <name>Resources.zip</name>
           </resourceFile>
         </resourceFiles>
       </component>

       <component type="Assembly">
         <assemblies>
           <basePath>bin</basePath>
           <assembly>
             <path>bin</path>
             <name>${ProjectName}.dll</name>
           </assembly>
         </assemblies>
       </component>
    
     </components>
   </package>
 </packages>
</dotnetnuke>
]]></File>
<File name="SETUP.md"><![CDATA[# Template usage

Due to template engine limitations we need to do some will require some changes 
to be made manually in a project file.

1. Update reference to `DotNetNuke.dll` and other referenced assemblies to a DNN "bin" folder - if needed.

2. Template assumes that project is created in DNN "DesktopModules" folder with a parent solution folder 
   (same name as project's), so `..\..\..\bin` path is used to reference assemblies in DNN `bin` folder.

3. Set project build output path to DNN `bin` folder in the project options.
   It can be `..\..\..\bin` for the case, described above.
   
4. Build solution to check it out. Then you done with this, `${ProjectName}.dll` is located in a DNN `bin` folder.
  
5. You may want to disable automatic updates of CodeBehind partial classes in project options
   under "ASP.NET" page. Automatic updates is not working correctly with third-party controls 
   in the MonoDevelop / Xamarin Studio anyway. This is true at least for version 4.2.3.

6. Add to your solution new project of type "DNN packaging project" and follow instructions 
   in it's `SETUP.md` to setup packaging.

# Solution stucture for development

```
DNN
|- bin
    |- ${SolutionName}.dll
    |- ${SolutionName}_Next.dll
|- DesktopModules
    |- ${SolutionName} (solution)
        |- ${SolutionName} (primary extension project)
            |- SqlDataProvider (folder for DB scripts)
                |- 01.00.00.SqlDataProvider
                |- UnInstall.SqlDataProvider
            |- ${SolutionName}.dnn (manifest)
            |- License.txt
            |- ReleaseNotes.txt
        |- ${SolutionName}_Next (secondary extension project) 
        |- Packages (packaging project)
            |- *.targets
```
]]></File>
   <File name="License.txt"><![CDATA[<p>This module is published under the terms of MIT/X11 License.</p>
]]></File>
   <File name="ReleaseNotes.txt"><![CDATA[<!-- 
<h3>Version 01.00.01</h3>
<p>This is the stabilization release for 01.00.00.</p>
<ul>
	<li>Added new feature.</li>
	<li>Fixed bug.</li>
</ul>
-->

<h3>Version 01.00.00</h3>
<p>This is the initial release.</p>
]]></File>
			</Files>
		</Project>
	</Combine>
</Template>