<?xml version="1.0"?>
<Template originator="Roman M. Yagodin" created="2012/08/10">
	<!-- Template Header -->
	<TemplateConfiguration>
		<_Name>C# compiled module with DAL 2</_Name>
		<_Category>other/dnn/general</_Category>
		<Icon>md-aspnet-empty-project|res:project-dnn-overlay-32.png</Icon>
		<LanguageName>C#</LanguageName>
        <ProjectType>AspNetApp</ProjectType>
		<_Description>Creates a WebForms-based module project for DNN Platform which use DAL2 for data access.

NOTE: Ensure that 'Create directory for solution' flag is checked.</_Description>
	</TemplateConfiguration>
	<!-- Actions -->
	<Actions>
		<Open filename="SETUP.md" />
	</Actions>
	<!-- Template Content -->
	<Combine name="${ProjectName}" directory=".">
		<Options>
			<StartupProject>"${ProjectName}</StartupProject>
		</Options>
		<Project name="${ProjectName}" directory="." type="AspNetApp">
			<!-- Causes errors in ASP.NET code completition! 
				<Options Target="Library" TargetFrameworkVersion="4.0" /> 
			-->
			<References>
				<Reference type="Package" refto="System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
				<Reference type="Package" refto="System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
				<Reference type="Package" refto="System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
				<Reference type="Package" refto="System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
				<Reference type="Package" refto="System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
				<Reference type="Package" refto="System.Web.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
				<Reference type="Package" refto="System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" />
				<Reference type="Package" refto="System.Xml.Linq, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
			</References>
            <Packages>
                <Package id="R7.DotNetNuke.Extensions" version="0.10.0" />
            </Packages>
			<Files>
                <FileTemplateReference TemplateID="CSharpAssemblyInfo" name="AssemblyInfo.cs" />
                <Directory name="js" />
				<File name="module.css"><![CDATA[/* Place CSS for view control here */

.${ProjectName}_ContentList { width:100% }				
.${ProjectName}_ContentListItem { text-align: left }
.${ProjectName}_UserName { font-weight:bold }
.${ProjectName}_CreateOnDate { font-style:italic }
.${ProjectName}_Content { clear:both }

]]></File>
                <File name="admin.css"><![CDATA[/* Place CSS for edit / settings controls here */
]]></File>
                <Directory name="SqlDataProvider">
                <File name="00.01.00.SqlDataProvider"><![CDATA[-- NOTE: To manually execute this script you must 
-- replace {databaseOwner} and {objectQualifier} with real values. 
-- Defaults is "dbo." for database owner and "" for object qualifier 

-- Create tables

IF NOT EXISTS (select * from sys.objects where object_id = object_id (N'{databaseOwner}[{objectQualifier}${ProjectName}_${ProjectName}s]') and type in (N'U'))
BEGIN
	CREATE TABLE {databaseOwner}[{objectQualifier}${ProjectName}_${ProjectName}s]
	(
		[${ProjectName}ID] int NOT NULL IDENTITY (1, 1),
		[ModuleID] int NOT NULL,
		[Content] nvarchar(max) NOT NULL,
		[CreatedByUser] int NOT NULL,
		[CreatedOnDate] datetime NOT NULL DEFAULT (GETDATE ())
        CONSTRAINT [PK_{objectQualifier}${ProjectName}_${ProjectName}s] PRIMARY KEY CLUSTERED (${ProjectName}ID)
        CONSTRAINT [FK_{objectQualifier}${ProjectName}_${ProjectName}s_{objectQualifier}Modules] FOREIGN KEY (ModuleID)
            REFERENCES {databaseOwner}[{objectQualifier}Modules] (ModuleID) ON DELETE CASCADE
	)
   		
	CREATE NONCLUSTERED INDEX [IX_{objectQualifier}${ProjectName}_${ProjectName}s_ModuleID] 
		ON {databaseOwner}[{objectQualifier}${ProjectName}_${ProjectName}s] ([ModuleID])
END
GO
]]></File>
				<File name="Uninstall.SqlDataProvider"><![CDATA[-- NOTE: To manually execute this script you must 
-- replace {databaseOwner} and {objectQualifier} with real values. 
-- Defaults is "dbo." for database owner and "" for object qualifier 

-- Drop tables

ALTER TABLE {databaseOwner}[{objectQualifier}${ProjectName}_${ProjectName}s] 
	DROP CONSTRAINT [FK_{objectQualifier}${ProjectName}_${ProjectName}s_{objectQualifier}Modules]
GO

DROP INDEX {databaseOwner}[{objectQualifier}${ProjectName}_${ProjectName}s].[IX_{objectQualifier}${ProjectName}_${ProjectName}s_ModuleID]
GO

DROP TABLE {databaseOwner}[{objectQualifier}${ProjectName}_${ProjectName}s]
GO
]]></File>
    </Directory>
				<Directory name="App_LocalResources">
					<File name="View${ProjectName}.ascx.resx"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <data xml:space="preserve" name="AddContent.Action">
    <value>Add Content</value>
  </data>
  <data xml:space="preserve" name="ModuleHelp.Text">
    <value>&lt;P&gt;A ${ProjectName} module&lt;/P&gt;</value>
  </data>
  <data xml:space="preserve" name="DefaultContent.Text">
    <value>Here is some sample content</value>
  </data>
  <data xml:space="preserve" name="NothingToDisplay.Text">
  	<value>Nothing to display, add some items.</value>
  </data>
</root>]]></File>
					<File name="View${ProjectName}.ascx.ru-RU.resx"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <data xml:space="preserve" name="AddContent.Action">
    <value>Добавить содержимое</value>
  </data>
  <data xml:space="preserve" name="ModuleHelp.Text">
    <value>&lt;P&gt; Модуль ${ProjectName}&lt;/P&gt;</value>
  </data>
  <data xml:space="preserve" name="DefaultContent.Text">
    <value>Что-то вместо содержимого</value>
  </data>
  <data xml:space="preserve" name="NothingToDisplay.Text">
  	<value>Нечего отображать, добавьте элементы.</value>
  </data>
</root>]]></File>
					<File name="Edit${ProjectName}.ascx.resx"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <data xml:space="preserve" name="lblContent.Text">
    <value>Content:</value>
  </data>
  <data xml:space="preserve" name="lblContent.Help">
    <value>Enter the Content</value>
  </data>
  <data xml:space="preserve" name="valContent.ErrorMessage">
    <value>&lt;br&gt;Content is required</value>
  </data>
  <data xml:space="preserve" name="ModuleHelp.Text">
    <value>&lt;P&gt;A ${ProjectName} module&lt;/P&gt;</value>
  </data>
  <data xml:space="preserve" name="ControlTitle_edit.Text">
    <value>Edit ${ProjectName}</value>
  </data>
</root>]]></File>
					<File name="Edit${ProjectName}.ascx.ru-RU.resx"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <data xml:space="preserve" name="lblContent.Text">
    <value>Содержимое:</value>
  </data>
  <data xml:space="preserve" name="lblContent.Help">
    <value>Введите содержимое</value>
  </data>
  <data xml:space="preserve" name="valContent.ErrorMessage">
    <value>&lt;br&gt;Содержимое обязательно!</value>
  </data>
  <data xml:space="preserve" name="ModuleHelp.Text">
    <value>&lt;P&gt;Модуль ${ProjectName}&lt;/P&gt;</value>
  </data>
  <data xml:space="preserve" name="ControlTitle_edit.Text">
    <value>Редактировать ${ProjectName}</value>
  </data>
</root>]]></File>
					<File name="Settings${ProjectName}.ascx.resx"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <data xml:space="preserve" name="lblTemplate.Text">
    <value>Template</value>
  </data>
  <data xml:space="preserve" name="lblTemplate.Help">
    <value>Allows you to provide a custom template for displaying the items. Use parameters for dynamic substitution ( ie. [CONTENT] [CREATEDONDATE] [CREATEDBYUSER] [CREATEDBYUSERNAME] )</value>
  </data>
  <data xml:space="preserve" name="ControlTitle_settings.Text">
    <value>${ProjectName} Settings</value>
  </data>
  <data xml:space="preserve" name="ModuleHelp.Text">
    <value>About ${ProjectName} Settings</value>
  </data>
  <data xml:space="preserve" name="sectionBasicSettings.Text">
    <value>Basic Settings</value>
  </data>
</root>]]></File>
					<File name="Settings${ProjectName}.ascx.ru-RU.resx"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <data xml:space="preserve" name="lblTemplate.Text">
    <value>Шаблон</value>
  </data>
  <data xml:space="preserve" name="lblTemplate.Help">
    <value>Позволяет задать пользовательский шаблон для отображения элементов. Используйте параметры для замены: [CONTENT] [CREATEDONDATE] [CREATEDBYUSER] [CREATEDBYUSERNAME]</value>
  </data>
  <data xml:space="preserve" name="ControlTitle_settings.Text">
    <value>Настройки ${ProjectName}</value>
  </data>
  <data xml:space="preserve" name="ModuleHelp.Text">
    <value>О настройках ${ProjectName}</value>
  </data>
  <data xml:space="preserve" name="sectionBasicSettings.Text">
    <value>Основные настройки</value>
  </data>
</root>]]></File>
				</Directory>
				<Directory name="Components">
					<File name="${ProjectName}Settings.cs" AddStandardHeader="True"><![CDATA[using System;
using DotNetNuke.Entities.Modules.Settings;

namespace ${ProjectName}.Components
{
	/// <summary>
	/// Provides strong typed access to settings used by module
	/// </summary>
	public class ${ProjectName}Settings
	{
		/// <summary>
		/// Template used to render the module content
		/// </summary>
		[TabModuleSetting (Prefix = "${ProjectName}_")]
		public string Template { get; set; } = "<i>[CREATEDONDATE]<i> <b>[CREATEDBYUSERNAME]</b>:<br />[CONTENT]";
	}
}
]]></File>
					<File name="${ProjectName}Controller.cs" AddStandardHeader="True"><![CDATA[using System;
using System.Collections.Generic;
using System.Text;
using System.Xml;
using System.Linq;
using DotNetNuke.Collections;
using DotNetNuke.Data;
using DotNetNuke.Common.Utilities;
using DotNetNuke.Entities.Modules;
using DotNetNuke.Services.Search;
using DotNetNuke.Services.Search.Entities;
using R7.DotNetNuke.Extensions.Data;
using ${ProjectName}.Data;

namespace ${ProjectName}.Components
{
	public class ${ProjectName}Controller : ModuleSearchBase, IPortable
	{
		#region ModuleSearchBase implementaion

		public override IList<SearchDocument> GetModifiedSearchDocuments (ModuleInfo modInfo, DateTime beginDate)
		{
			var searchDocs = new List<SearchDocument> ();

			// TODO: Implement GetModifiedSearchDocuments () here
            // var sd = new SearchDocument ();
			// searchDocs.Add (searchDoc);
			         
			return searchDocs;
		}

		#endregion

		#region IPortable members

		/// <summary>
		/// Exports a module to XML
		/// </summary>
		/// <param name="ModuleID">a module ID</param>
		/// <returns>XML string with module representation</returns>
		public string ExportModule (int moduleId)
		{
			var sb = new StringBuilder ();
            var dataProvider = new Dal2DataProvider ();
			var infos = dataProvider.GetObjects<${ProjectName}Info> (moduleId);

			if (infos != null)
			{
				sb.Append ("<${ProjectName}s>");
				foreach (var info in infos)
				{
					sb.Append ("<${ProjectName}>");
					sb.Append ("<content>");
					sb.Append (XmlUtils.XMLEncode (info.Content));
					sb.Append ("</content>");
					sb.Append ("</${ProjectName}>");
				}
				sb.Append ("</${ProjectName}s>");
			}
			
			return sb.ToString ();
		}

		/// <summary>
		/// Imports a module from an XML
		/// </summary>
		/// <param name="ModuleID"></param>
		/// <param name="Content"></param>
		/// <param name="Version"></param>
		/// <param name="UserID"></param>
		public void ImportModule (int ModuleID, string Content, string Version, int UserID)
		{
			var infos = DotNetNuke.Common.Globals.GetContent (Content, "${ProjectName}s");
		    var dataProvider = new Dal2DataProvider ();

			foreach (XmlNode info in infos.SelectNodes("${ProjectName}"))
			{
				var item = new ${ProjectName}Info ();
				item.ModuleID = ModuleID;
				item.Content = info.SelectSingleNode ("content").InnerText;
				item.CreatedByUser = UserID;

				dataProvider.Add<${ProjectName}Info> (item);
			}
		}

		#endregion
	}
}
]]></File>
</Directory>
<Directory name="Data">
<!--<FileTemplateReference TemplateID="DotNetNuke PetaPOCO class" name="${ProjectName}Info.cs" />-->
<File name="${ProjectName}Info.cs" AddStandardHeader="True"><![CDATA[using System;
using System.Linq;
using DotNetNuke.Data;
using DotNetNuke.ComponentModel.DataAnnotations;
using DotNetNuke.Entities.Portals;
using DotNetNuke.Entities.Users;

namespace ${ProjectName}.Data
{
	// More attributes for class:
	// Set caching for table: [Cacheable("${ProjectName}_${Name}s", CacheItemPriority.Default, 20)] 
	// Explicit mapping declaration: [DeclareColumns]
	
	// More attributes for class properties:
	// Custom column name: [ColumnName("${ProjectName}ID")]
	// Explicit include column: [IncludeColumn]
	// Note: DAL 2 has no AutoJoin analogs from PetaPOCO at this time
	
	[TableName("${ProjectName}_${ProjectName}s")]
	[PrimaryKey("${ProjectName}ID", AutoIncrement = true)]
	[Scope("ModuleID")]
	public class ${ProjectName}Info
	{
        #region Fields
        
		private string createdByUserName = null;

		#endregion
		
        #region Properties

		public int ${ProjectName}ID { get; set; }

		public int ModuleID { get; set; }

		public string Content { get; set; }

		public int CreatedByUser { get; set; }

		[ReadOnlyColumn]
		public DateTime CreatedOnDate { get; set; }
        
		[IgnoreColumn]
		public string CreatedByUserName
		{
			get
			{
				if (createdByUserName == null)
				{
					var portalId = PortalController.Instance.GetCurrentPortalSettings ().PortalId;
					var user = UserController.GetUserById (portalId, CreatedByUser);
					createdByUserName = user.DisplayName;
				}

				return createdByUserName; 
			}
		}

        #endregion
     }
}
]]></File>

				</Directory>
				<File name="View${ProjectName}.ascx"><![CDATA[<%@ Control Language="C#" AutoEventWireup="true" CodeBehind="View${ProjectName}.ascx.cs" Inherits="${ProjectName}.View${ProjectName}" %>
<asp:DataList ID="lstContent" DataKeyField="${ProjectName}ID" runat="server" CssClass="${ProjectName}_ContentList" OnItemDataBound="lstContent_ItemDataBound">
	<ItemTemplate>
		<asp:HyperLink ID="linkEdit" runat="server">
			<asp:Image ID="imageEdit" runat="server" IconKey="Edit" ResourceKey="Edit" />
		</asp:HyperLink>
		<asp:Label ID="lblUserName" runat="server" CssClass="${ProjectName}_UserName" />
		<asp:Label ID="lblCreatedOnDate" runat="server" CssClass="${ProjectName}_CreatedOnDate" /> 
		<asp:Label ID="lblContent" runat="server" CssClass="${ProjectName}_Content" />
	</ItemTemplate>
	<ItemStyle CssClass="${ProjectName}_ContentListItem" />
</asp:DataList>
]]></File>
				<File name="View${ProjectName}.ascx.cs" DependsOn="View${ProjectName}.ascx" AddStandardHeader="True"><![CDATA[using System;
using System.Web.UI.WebControls;
using DotNetNuke.Entities.Icons;
using DotNetNuke.Entities.Modules;
using DotNetNuke.Entities.Modules.Actions;
using DotNetNuke.Services.Exceptions;
using DotNetNuke.Services.Localization;
using R7.DotNetNuke.Extensions.Data;
using R7.DotNetNuke.Extensions.ModuleExtensions;
using R7.DotNetNuke.Extensions.Modules;		
using ${ProjectName}.Components;
using ${ProjectName}.Data;

namespace ${ProjectName}
{
	public partial class View${ProjectName} : PortalModuleBase<${ProjectName}Settings>, IActionable
	{
    	#region Handlers 
    	    	
    	/// <summary>
		/// Handles Load event for a control
		/// </summary>
		/// <param name="e">Event args.</param>
		protected override void OnLoad (EventArgs e)
		{
			base.OnLoad(e);
			
			try
			{
				if (!IsPostBack)
				{
					var dataProvider = new Dal2DataProvider ();
					var items = dataProvider.GetObjects<${ProjectName}Info> (this.ModuleId);

					// check if we have some content to display, 
					// otherwise display a message for module editors.
					if (items == null && IsEditable)
					{
						this.Message ("NothingToDisplay.Text", MessageType.Info, true);
					}
					else
					{
						// bind the data
						lstContent.DataSource = items;
						lstContent.DataBind ();
					}
				}
			}
			catch (Exception ex)
			{
				Exceptions.ProcessModuleLoadException (this, ex);
			}
		}
		
		#endregion		
			
        #region IActionable implementation
        
		public DotNetNuke.Entities.Modules.Actions.ModuleActionCollection ModuleActions
		{
			get
			{
				// create a new action to add an item, this will be added 
				// to the controls dropdown menu
				var actions = new ModuleActionCollection ();
				actions.Add (
					GetNextActionID (), 
					Localization.GetString (ModuleActionType.AddContent, this.LocalResourceFile),
                    ModuleActionType.AddContent, 
                    "", 
                    IconController.IconURL ("Add"), 
                    EditUrl ("Edit"),
                    false, 
                    DotNetNuke.Security.SecurityAccessLevel.Edit,
                    true, 
                    false
                );

				return actions;
			}
		}

        #endregion

		/// <summary>
		/// Handles the items being bound to the datalist control. In this method we merge the data with the
		/// template defined for this control to produce the result to display to the user
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		protected void lstContent_ItemDataBound (object sender, System.Web.UI.WebControls.DataListItemEventArgs e)
		{
			// e.Item.DataItem is object of ${ProjectName}Info class
			var item = (${ProjectName}Info) e.Item.DataItem;
			
			// find controls in DataList item template
			var lblUserName = (Label) e.Item.FindControl ("lblUserName");
			var lblCreatedOnDate = (Label) e.Item.FindControl ("lblCreatedOnDate");
			var lblContent = (Label) e.Item.FindControl ("lblContent");
			var linkEdit = (HyperLink) e.Item.FindControl ("linkEdit");
			var iconEdit = (Image) e.Item.FindControl ("imageEdit");
			
            // edit link
            if (IsEditable)
            {
            	linkEdit.NavigateUrl = EditUrl ("${ProjectName}ID", item.${ProjectName}ID.ToString (), "Edit");
			}

			// make edit link visible in edit mode
			linkEdit.Visible = IsEditable;
			iconEdit.Visible = IsEditable;
            
            // fill the controls
            lblUserName.Text = item.CreatedByUserName;
			lblCreatedOnDate.Text = item.CreatedOnDate.ToShortDateString();
			lblContent.Text = Server.HtmlDecode(item.Content);
		}
	}
}
]]></File>
				<File name="View${ProjectName}.ascx.controls.cs" DependsOn="View${ProjectName}.ascx" ShowAutogenerationNotice="False" AddStandardHeader="False" SuppressAutoOpen="True"><![CDATA[using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using System.Linq;

using DotNetNuke.UI.UserControls;
using DotNetNuke.UI.WebControls;
using DotNetNuke.Web.UI.WebControls;

namespace ${ProjectName} 
{
	public partial class View${ProjectName}
	{	
		protected DataList lstContent;
	}
}]]></File>
				<File name="Settings${ProjectName}.ascx"><![CDATA[<%@ Control Language="C#" AutoEventWireup="true" CodeBehind="Settings${ProjectName}.ascx.cs" Inherits="${ProjectName}.Settings${ProjectName}" %>
<%@ Register TagPrefix="dnn" TagName="Label" Src="~/controls/LabelControl.ascx" %>
<%@ Register TagPrefix="dnn" Namespace="DotNetNuke.Web.UI.WebControls" Assembly="DotNetNuke.Web" %>
<%@ Register TagPrefix="dnn" Namespace="DotNetNuke.Web.Client.ClientResourceManagement" Assembly="DotNetNuke.Web.Client" %>

<dnn:DnnCssInclude runat="server" FilePath="~/DesktopModules/${ProjectName}/${ProjectName}/admin.css" Priority="200" />
<div class="dnnForm dnnClear">
	<h2 class="dnnFormSectionHead"><a href=""><asp:Label runat="server" ResourceKey="sectionBasicSettings.Text" /></a></h2>
	<fieldset>	
		<div class="dnnFormItem">
			<dnn:Label ID="lblTemplate" runat="server" ControlName="txtTemplate" />
			<asp:TextBox ID="txtTemplate" runat="server" CssClass="NormalTextBox" Rows="10" Columns="30" TextMode="MultiLine" MaxLength="2000" />
		</div>
	</fieldset>	
</div>
]]></File>
				<File name="Settings${ProjectName}.ascx.cs" DependsOn="Settings${ProjectName}.ascx" AddStandardHeader="True"><![CDATA[using System;
using DotNetNuke.Entities.Modules;
using DotNetNuke.Services.Exceptions;
using R7.DotNetNuke.Extensions.Modules;
using ${ProjectName}.Components;

namespace ${ProjectName}
{	
	public partial class Settings${ProjectName} : ModuleSettingsBase<${ProjectName}Settings>
	{
		/// <summary>
		/// Handles the loading of the module setting for this control
		/// </summary>
		public override void LoadSettings ()
		{
			try
			{
				if (!IsPostBack)
				{
					if (!string.IsNullOrWhiteSpace (Settings.Template))
					{
						txtTemplate.Text = Settings.Template;
					}
				}
			}
			catch (Exception ex)
			{
				Exceptions.ProcessModuleLoadException (this, ex);
			}
		}
      
		/// <summary>
		/// handles updating the module settings for this control
		/// </summary>
		public override void UpdateSettings ()
		{
			try
			{
				Settings.Template = txtTemplate.Text;
					
				SettingsRepository.SaveSettings (ModuleConfiguration, Settings);	

				ModuleController.SynchronizeModule (ModuleId);
			}
			catch (Exception ex)
			{
				Exceptions.ProcessModuleLoadException (this, ex);
			}
		}
	}
}
]]></File>
				<File name="Settings${ProjectName}.ascx.controls.cs" DependsOn="Settings${ProjectName}.ascx" ShowAutogenerationNotice="False" AddStandardHeader="False" SuppressAutoOpen="True"><![CDATA[using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using DotNetNuke.UI.UserControls;
using DotNetNuke.UI.WebControls;
using DotNetNuke.Web.UI.WebControls;

namespace ${ProjectName}
{
	public partial class Settings${ProjectName}
	{	
		protected TextBox txtTemplate;
	}
}]]></File>
                <File name="Edit${ProjectName}.ascx"><![CDATA[<%@ Control Language="C#" AutoEventWireup="false" CodeBehind="Edit${ProjectName}.ascx.cs" Inherits="${ProjectName}.Edit${ProjectName}" %>
<%@ Register TagPrefix="dnn" TagName="Label" Src="~/controls/labelcontrol.ascx" %>
<%@ Register TagPrefix="dnn" TagName="TextEditor" Src="~/controls/TextEditor.ascx"%>
<%@ Register TagPrefix="dnn" TagName="Audit" Src="~/controls/ModuleAuditControl.ascx" %>
<%@ Register TagPrefix="dnn" Namespace="DotNetNuke.Web.UI.WebControls" Assembly="DotNetNuke.Web" %>
<%@ Register TagPrefix="dnn" Namespace="DotNetNuke.Web.Client.ClientResourceManagement" Assembly="DotNetNuke.Web.Client" %>

<dnn:DnnCssInclude runat="server" FilePath="~/DesktopModules/${ProjectName}/${ProjectName}/admin.css" Priority="200" />
<div class="dnnForm dnnClear">
	<fieldset>	
		<div class="dnnFormItem">
			<dnn:Label ID="lblContent" runat="server" ControlName="txtContent" />
			<dnn:TextEditor ID="txtContent" runat="server" Height="200" Width="100%" />
		</div>
	</fieldset>
	<ul class="dnnActions dnnClear">
		<li><asp:LinkButton id="buttonUpdate" runat="server" CssClass="dnnPrimaryAction" ResourceKey="cmdUpdate" CausesValidation="true" /></li>
		<li><asp:LinkButton id="buttonDelete" runat="server" CssClass="dnnSecondaryAction" ResourceKey="cmdDelete" /></li>
		<li><asp:HyperLink id="linkCancel" runat="server" CssClass="dnnSecondaryAction" ResourceKey="cmdCancel" /></li>
	</ul>
	<dnn:Audit id="ctlAudit" runat="server" />
</div>
]]></File>
				<File name="Edit${ProjectName}.ascx.cs" DependsOn="Edit${ProjectName}.ascx" AddStandardHeader="True"><![CDATA[using System;
using System.Web.UI.WebControls;
using System.Linq;

using DotNetNuke.Common;
using DotNetNuke.Common.Utilities;
using DotNetNuke.Entities.Modules;
using DotNetNuke.Services.Exceptions;
using DotNetNuke.Services.Localization;
using DotNetNuke.UI.UserControls;
using R7.DotNetNuke.Extensions.Data;
using ${ProjectName}.Data;

namespace ${ProjectName}
{
    public partial class Edit${ProjectName} : PortalModuleBase
	{
		// ALT: private int itemId = Null.NullInteger;
		private int? itemId = null; 
		
		#region Handlers
		
		/// <summary>
		/// Handles Init event for a control.
		/// </summary>
		/// <param name="e">Event args.</param>
		protected override void OnInit (EventArgs e)
		{
			base.OnInit (e);

            // set url for Cancel link
            linkCancel.NavigateUrl = Globals.NavigateURL ();

			// wireup event handlers
			buttonUpdate.Click += buttonUpdate_Click;
			buttonDelete.Click += buttonDelete_Click;

			// add confirmation dialog to delete button
			buttonDelete.Attributes.Add ("onClick", "javascript:return confirm('" + Localization.GetString ("DeleteItem") + "');");
		}

		/// <summary>
		/// Handles Load event for a control.
		/// </summary>
		/// <param name="e">Event args.</param>
		protected override void OnLoad (EventArgs e)
		{
			base.OnLoad (e);
			
			try
			{
				// parse querystring parameters
				int tmpItemId;
				if (int.TryParse(Request.QueryString ["${ProjectName}ID"], out tmpItemId))
					itemId = tmpItemId;
      
				if (!IsPostBack)
				{
					// load the data into the control the first time we hit this page

					// check we have an item to lookup
					// ALT: if (!Null.IsNull (itemId) 
					if (itemId.HasValue)
					{
						// load the item
						var dataProvider = new Dal2DataProvider ();
						var item = dataProvider.Get<${ProjectName}Info> (itemId.Value, this.ModuleId);

						if (item != null)
						{
						    // TODO: Fill controls with data
							txtContent.Text = item.Content;
							
							// setup audit control
							ctlAudit.CreatedByUser = item.CreatedByUserName;
							ctlAudit.CreatedDate = item.CreatedOnDate.ToLongDateString ();
						} 
						else
							Response.Redirect (Globals.NavigateURL (), true);
					} 
					else
					{
						buttonDelete.Visible = false;
						ctlAudit.Visible = false;
					}
				}
			} 
			catch (Exception ex)
			{
				Exceptions.ProcessModuleLoadException (this, ex);
			}
		}

		/// <summary>
		/// Handles Click event for Update button
		/// </summary>
		/// <param name='sender'>
		/// Sender.
		/// </param>
		/// <param name='e'>
		/// Event args.
		/// </param>
		protected void buttonUpdate_Click (object sender, EventArgs e)
		{
			try
			{
				var dataProvider = new Dal2DataProvider ();
				${ProjectName}Info item;

				// determine if we are adding or updating
				// ALT: if (Null.IsNull (itemId))
				if (!itemId.HasValue)
				{
					// TODO: populate new object properties with data from controls 
					// to add new record
					item = new ${ProjectName}Info ();
				}
				else
				{
					// TODO: update properties of existing object with data from controls 
					// to update existing record
					item = dataProvider.Get<${ProjectName}Info> (itemId.Value, this.ModuleId);
				}

				// fill the object
				item.Content = txtContent.Text;
				item.ModuleID = this.ModuleId;

				if (!itemId.HasValue)
				{
					item.CreatedByUser = this.UserId;					
					dataProvider.Add<${ProjectName}Info> (item);
				}
				else
				{
					dataProvider.Update<${ProjectName}Info> (item);
				}

                ModuleController.SynchronizeModule (ModuleId);

				Response.Redirect (Globals.NavigateURL (), true);
			}
			catch (Exception ex)
			{
				Exceptions.ProcessModuleLoadException (this, ex);
			}	
		}

		/// <summary>
		/// Handles Click event for Delete button
		/// </summary>
		/// <param name='sender'>
		/// Sender.
		/// </param>
		/// <param name='e'>
		/// Event args.
		/// </param>
		protected void buttonDelete_Click (object sender, EventArgs e)
		{
			try
			{
				// ALT: if (!Null.IsNull (itemId))
				if (itemId.HasValue)
				{
					var dataProvider = new Dal2DataProvider ();
					dataProvider.Delete<${ProjectName}Info> (itemId.Value);
					Response.Redirect (Globals.NavigateURL (), true);
				}
			} 
			catch (Exception ex)
			{
				Exceptions.ProcessModuleLoadException (this, ex);
			}
		}
		
		#endregion
	}
}
]]></File>
				<File name="Edit${ProjectName}.ascx.controls.cs" DependsOn="Edit${ProjectName}.ascx" ShowAutogenerationNotice="False" AddStandardHeader="False" SuppressAutoOpen="True"><![CDATA[
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using DotNetNuke.UI.UserControls;
using DotNetNuke.UI.WebControls;
using DotNetNuke.Web.UI.WebControls;

namespace ${ProjectName} 
{
	public partial class Edit${ProjectName}
	{	
		protected LinkButton buttonUpdate;
		protected LinkButton buttonDelete;
		protected HyperLink linkCancel;
		protected TextEditor txtContent;
		protected ModuleAuditControl ctlAudit;
	}
}]]></File>
				<File name="${ProjectName}.dnn" src="Files/CSharpModuleDal2.dnn" />
				<File name="SETUP.md" src="Files/SETUP.md" />
   <File name="license.htm"><![CDATA[<p>This module is published under the terms of MIT/X11 License.</p>
]]></File>
   <File name="releaseNotes.htm"><![CDATA[<h3>Version 0.1.0</h3>
<p>This is the initial release.</p>
]]></File>
			</Files>
		</Project>
	</Combine>
</Template>