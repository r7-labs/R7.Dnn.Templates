<?xml version="1.0"?>
<Template originator="Roman M. Yagodin" created="2014/06/18">
	<!-- Template Header -->
	<TemplateConfiguration>
		<_Name>DNN extension packaging project</_Name>
		<_Category>C#/DNN Platform</_Category>
		<Icon>md-project|res:project-package-overlay-32.png|res:project-dnn-overlay-32.png</Icon>
		<LanguageName>C#</LanguageName>
		<_Description>Creates a new DNN extension packaging project using MSBuild. Add it to the solution containing one or more DNN extensions (modules) projects.</_Description>
	</TemplateConfiguration>
	<!-- Actions -->
	<Actions>
		<Open filename="SETUP.md" />
	</Actions>
	<!-- Template Content -->
	<Combine name="${ProjectName}" directory=".">
		<Options>
			<StartupProject>"${ProjectName}</StartupProject>
		</Options>
		<Project name="${ProjectName}" directory=".">
			<Options Target="Library" />
			<References>
				<Reference type="Package" refto="System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
			</References>
            <Packages>
                <Package id="MSBuildTasks" version="1.4.0.128" />
            </Packages>
			<Files>
<File name="SETUP.md"><![CDATA[# Initial setup of packaging project

This template uses MSBuild to create install packages,
but due to template engine limitations it will require some changes 
to be made manually in a project file.

1. Open `${ProjectName}.csproj` in text editor or open it from IDE (*Display Options > Show All Files*). 
Just after last `<Import Project="..." />` directive insert this code:

```
<!-- Begin snippet -->
<Import Project="..\packages\MSBuildTasks.1.4.0.128\tools\MSBuild.Community.Tasks.Targets" />
<PropertyGroup>
	<PackageExtension>zip</PackageExtension>
	<PackageName>${SolutionName}</PackageName>
	<PackageOutputPath>output</PackageOutputPath>
    <DnnLocalDeployPath Condition="'$(OS)' != 'Unix'">C:\Dotnetnuke</DnnLocalDeployPath>
    <DnnLocalDeployPath Condition="'$(OS)' == 'Unix'">/home/user/mnt/dnn</DnnLocalDeployPath>
    <MainProjectOutputPath>..\${SolutionName}\bin</MainProjectOutputPath>
</PropertyGroup>
<Import Project="Install.targets" />
<Import Project="LocalDeploy.targets" />
<Target Name="AfterBuild" DependsOnTargets="MakeInstallPackage;DoLocalDeploy" />
<!-- End snippet -->
```
2. Make sure `DnnLocalDeployPath` property for your OS contains valid DNN install path.

3. Make sure that `MainProjectOutputPath` property targets valid `${SolutionName}` main project output path -
it would be `bin\$(Configuration)`, not just `bin`!

4. Switch to "Release" configuration and execute "Build All" command. 
After this in a `${ProjectName}\output` folder you should find a `.zip` archive with install package.

5. Switch to "Debug" configuration and execute "Build All" command. This will invoke local deploy script, 
which will copy new binaries and required resource files (such as `.ascx`, '.js', etc.) to DNN install location.

# Initial setup of DNN installation

1. Go to your website's *DNN > Host > Extensions* and install required *DotNetNuke.R7* library package 
from [here](https://github.com/roman-yagodin/DotNetNuke.R7/releases).

2. Then install your newly created extension from `${SolutionName}-00.01.00-Install.zip` package in the same way.

# Further development

* Use "Debug" configuration to do local deploy after making code changes, then update your site in a browser 
to trigger recompilation.

* Use "Release" configuration to build install package.

# Extending solution

Current scripts automatically able to add all DNN projects inside solution into a single install package 
and provide local deploy of required files. The general idea behind that is that all projects in the solution is very dependant.

If you add new DNN extension to your solution using *R7.DnnTemplates*, you probably only need to:

1. Name your project file with *${SolutionName}_* prefix like *${SolutionName}_MyNewExtension*. 

2. Set new project output path the same as `${SolutionName}` main project output path. 
Generally it will be `..\${SolutionName}\bin` or `..\${SolutionName}\bin\$(Configuration)`.

3. Ensure that ${ProjectName} project will build last by moving ${ProjectName} Project/EndProject entry 
in the `${SolutionName}.sln` file to the bottom.

4. Merge new project's `.SqlDataProvider` files, `.dnn` manifest file (plus all files, referenced in the manifest -
generally, it's `license.htm` and `releaseNotes.htm`) into the similar files from `${SolutionName}` main extension project.

# General tips

* If `.sln`, `.csproj` or `.targets` file changed manually, you probably need to reload the solution.

]]></File>
	<FileTemplateReference TemplateID="DnnInstallPackage" name="Install.targets" />
    <FileTemplateReference TemplateID="DnnLocalDeploy" name="LocalDeploy.targets" />
            </Files>
		</Project>
	</Combine>
</Template>